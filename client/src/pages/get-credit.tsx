import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { LinkRegular, CopyRegular, CheckmarkRegular } from "@fluentui/react-icons";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";

export default function GetCreditPage() {
  const { toast } = useToast();
  const [showLinkDialog, setShowLinkDialog] = useState(false);
  const [bypassUrl, setBypassUrl] = useState("");
  const [copied, setCopied] = useState(false);

  const getCreditMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", "/api/get-credit");
      return await response.json();
    },
    onSuccess: (data) => {
      setBypassUrl(data.bypassUrl);
      setShowLinkDialog(true);
      toast({
        title: "‚úÖ Link v∆∞·ª£t ƒë√£ ƒë∆∞·ª£c t·∫°o!",
        description: data.message,
      });
    },
    onError: (error: any) => {
      toast({
        title: "‚ùå L·ªói t·∫°o link",
        description: error.message || "Kh√¥ng th·ªÉ t·∫°o link v∆∞·ª£t. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    },
  });

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(bypassUrl);
      setCopied(true);
      toast({
        title: "‚úÖ ƒê√£ sao ch√©p",
        description: "Link ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard.",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast({
        title: "‚ùå L·ªói sao ch√©p",
        description: "Kh√¥ng th·ªÉ sao ch√©p link. Vui l√≤ng sao ch√©p th·ªß c√¥ng.",
        variant: "destructive",
      });
    }
  };

  const handleOpenLink = () => {
    window.open(bypassUrl, '_blank');
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 p-4">
      <div className="max-w-2xl mx-auto pt-8">
        <Card className="shadow-lg border-0 bg-white/70 dark:bg-gray-800/70 backdrop-blur">
          <CardHeader className="text-center pb-6">
            <CardTitle className="text-2xl font-bold text-gray-900 dark:text-white flex items-center justify-center gap-2">
              <LinkRegular className="w-6 h-6 text-blue-600" />
              Nh·∫≠n Th√™m Credit
            </CardTitle>
            <CardDescription className="text-gray-600 dark:text-gray-300 mt-2">
              Nh·∫•p v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ nh·∫≠n link v∆∞·ª£t t·ª´ LinkBulks. Sau khi ho√†n th√†nh link, b·∫°n s·∫Ω ƒë∆∞·ª£c c·ªông 1 credit v√†o t√†i kho·∫£n.
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="text-center">
              <Button
                onClick={() => getCreditMutation.mutate()}
                disabled={getCreditMutation.isPending}
                size="lg"
                className="px-8 py-3 text-lg font-medium bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                data-testid="button-get-credit"
              >
                {getCreditMutation.isPending ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2" />
                    ƒêang t·∫°o link...
                  </>
                ) : (
                  <>
                    <LinkRegular className="w-5 h-5 mr-2" />
                    Nh·∫≠n Th√™m Credit (1 Credit)
                  </>
                )}
              </Button>
            </div>

            <div className="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg">
              <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">üìù C√°ch th·ª©c ho·∫°t ƒë·ªông:</h3>
              <ol className="text-sm text-blue-800 dark:text-blue-200 space-y-1 list-decimal list-inside">
                <li>B·∫•m n√∫t "Nh·∫≠n Th√™m Credit" ·ªü tr√™n</li>
                <li>H·ªá th·ªëng s·∫Ω t·∫°o link v∆∞·ª£t t·ª´ LinkBulks</li>
                <li>Ho√†n th√†nh link v∆∞·ª£t (th∆∞·ªùng l√† xem qu·∫£ng c√°o ho·∫∑c ch·ªù ƒë·ª£i)</li>
                <li>Sau khi ho√†n th√†nh, b·∫°n s·∫Ω ƒë∆∞·ª£c c·ªông 1 credit t·ª± ƒë·ªông</li>
              </ol>
            </div>

            <div className="bg-yellow-50 dark:bg-yellow-900/30 p-4 rounded-lg">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> M·ªói link ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng 1 l·∫ßn. Sau khi nh·∫≠n credit, link s·∫Ω kh√¥ng c√≤n hi·ªáu l·ª±c.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Dialog hi·ªÉn th·ªã link v∆∞·ª£t */}
      <Dialog open={showLinkDialog} onOpenChange={setShowLinkDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <LinkRegular className="w-5 h-5 text-blue-600" />
              Link V∆∞·ª£t ƒê√£ S·∫µn S√†ng
            </DialogTitle>
            <DialogDescription>
              Link v∆∞·ª£t ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! Sao ch√©p link v√† ho√†n th√†nh ƒë·ªÉ nh·∫≠n credit.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded border">
              <p className="text-sm break-all text-gray-700 dark:text-gray-300">
                {bypassUrl}
              </p>
            </div>
            
            <div className="flex gap-2">
              <Button
                onClick={handleCopyLink}
                variant="outlined"
                className="flex-1"
                data-testid="button-copy-link"
              >
                {copied ? (
                  <>
                    <CheckmarkRegular className="w-4 h-4 mr-2" />
                    ƒê√£ sao ch√©p
                  </>
                ) : (
                  <>
                    <CopyRegular className="w-4 h-4 mr-2" />
                    Sao ch√©p
                  </>
                )}
              </Button>
              
              <Button
                onClick={handleOpenLink}
                className="flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700"
                data-testid="button-open-link"
              >
                M·ªü Link V∆∞·ª£t
              </Button>
            </div>
            
            <div className="text-sm text-gray-600 dark:text-gray-400 text-center">
              Sau khi ho√†n th√†nh link v∆∞·ª£t, credit s·∫Ω ƒë∆∞·ª£c c·ªông t·ª± ƒë·ªông v√†o t√†i kho·∫£n c·ªßa b·∫°n.
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}